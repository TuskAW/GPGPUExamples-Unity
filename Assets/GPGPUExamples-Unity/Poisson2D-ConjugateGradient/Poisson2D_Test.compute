#pragma kernel CsSetSourceTermAndInitialGuess
#pragma kernel CsSetTestForDotProduct
#pragma kernel CsOutputRTValue

#define PI 3.1415926535
#define THREADS_X 16
#define THREADS_Y 16

RWTexture2D<float> _v;
RWTexture2D<float> _sourceTerm;

RWTexture2D<float> _a;
RWTexture2D<float> _b;
RWTexture2D<float> _c;

RWTexture2D<float> _TempInputTex;
RWStructuredBuffer<float> _OutComputeBuffer;

cbuffer params
{
    int _width;
    int _height;
};

float sourceFunc(uint2 pixelPos)
{
    float ra = _width/10.0;

    float r = distance(float2(pixelPos.x, pixelPos.y), float2(_width/2.0, _height/2.0));
    if (r < ra)
    {
        return -4.0*PI;
    }
    else
    {
        return 0.0;
    }
}

[numthreads(THREADS_X, THREADS_Y, 1)]
void CsSetSourceTermAndInitialGuess(uint2 i : SV_DispatchThreadID)
{
    _v[i] = 0.0; // Initial guess
    _sourceTerm[i] = sourceFunc(i); // Source term
}

[numthreads(THREADS_X, THREADS_Y, 1)]
void CsSetTestForDotProduct(uint2 i : SV_DispatchThreadID)
{
    // Test01
    _a[i] = 1.0;
    _b[i] = 2.0;

    //**************************
    // Test02 (Basel problem)
    // The sum of the series is approximately equal to 1.644934 (pi^2/6)
    //**************************
    // uint k = (i.x + _width*i.y) + 1;
    // _a[i] = 1.0/k;
    // _b[i] = 1.0/k;
}

[numthreads(THREADS_X, THREADS_Y, 1)]
void CsOutputRTValue(uint2 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= _width || id.y < 0 || id.y >= _height)
    {
        return;
    }

    float value = _TempInputTex[id];
    _OutComputeBuffer[id.x + _width*id.y] = value;
}
